<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContainsInvalidSingleQuote" xml:space="preserve">
    <value>The SQL entered contain invalid single quotes, make sure the single quotes you are using are not formatted.</value>
  </data>
  <data name="ConversionUnsuccessful" xml:space="preserve">
    <value>-- Error converting SQL; only Update/Delete/Merge code is supported:</value>
  </data>
  <data name="DefaultRequirements" xml:space="preserve">
    <value>This tool will convert any Update, Delete, or Merge SQL code to a select statement, while partially validating the SQL code. Results will update in real-time as you type or add your code into the SQL box. Once the code is converted, you can either highlight the code and copy (CTRL +A) or use the "Copy" button to copy the converted code into your clipboard</value>
  </data>
  <data name="Delete_Invalid" xml:space="preserve">
    <value>-- The below Delete contains an error in the "delete from ...  where" region</value>
  </data>
  <data name="InvalidSQLEntry" xml:space="preserve">
    <value>The data entered into the SQL box could not be converted</value>
  </data>
  <data name="Merge_Invalid" xml:space="preserve">
    <value>-- The below Merge contains an error in the "merge into ... using ..." region</value>
  </data>
  <data name="Merge_InvalidMatchedClause" xml:space="preserve">
    <value>-- The below Merge contains an error in the match clause</value>
  </data>
  <data name="MpRequired" xml:space="preserve">
    <value>Enter an MP Number (Enter any key if the code applies to multiple entities)</value>
  </data>
  <data name="NoSemicolon" xml:space="preserve">
    <value>End your SQL statements with a semicolon</value>
  </data>
  <data name="NotConverted" xml:space="preserve">
    <value>-- The below {0} was not converted due to a code error:</value>
  </data>
  <data name="SQLRequired" xml:space="preserve">
    <value>Enter an Update/Delete/Merge in the SQL box</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>Requirements:</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>1. An Update/Delete/Merge and MP Number.</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>2. Multiple statements are supported.</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>3. Each piece of SQL code needs to end in a semicolon for the converter to pickup the code.</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Make sure to enter a valid SQL statement, ending in a semicolon</value>
  </data>
  <data name="SuccessfullyConverted" xml:space="preserve">
    <value>-- Successfully converted from {0} to:</value>
  </data>
  <data name="Timeout" xml:space="preserve">
    <value>-- The below code entered caused a converter timeout and is causing an error, send this code as feedback to fix the issue in the future:</value>
  </data>
  <data name="Update_InvalidSet" xml:space="preserve">
    <value>-- The below Update contains an error in the "set" region or in the "set" fields</value>
  </data>
  <data name="Update_InvalidUpdate" xml:space="preserve">
    <value>-- The below Update contains an error in the "update ... set" region</value>
  </data>
</root>